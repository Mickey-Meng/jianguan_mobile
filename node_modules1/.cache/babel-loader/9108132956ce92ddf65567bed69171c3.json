{"remainingRequest":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\thread-loader\\dist\\cjs.js!E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\babel-loader\\lib\\index.js!E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\src\\components\\ProjectSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\src\\components\\ProjectSelect.vue","mtime":1684246187879},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\babel.config.js","mtime":1684246187306},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1684411445150},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1684411445099},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\babel-loader\\lib\\index.js","mtime":1684411446344},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1684411445150},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":1684411444634}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
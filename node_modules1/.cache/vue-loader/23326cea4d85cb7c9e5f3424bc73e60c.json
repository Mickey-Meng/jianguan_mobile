{"remainingRequest":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\src\\views\\common\\tasklog.vue?vue&type=style&index=0&id=7ccc22d6&scoped=true&lang=scss&","dependencies":[{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\src\\views\\common\\tasklog.vue","mtime":1684246187968},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\css-loader\\dist\\cjs.js","mtime":1684411443176},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1684411446724},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\postcss-loader\\src\\index.js","mtime":1684411443221},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1684411446938},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1684411445150},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":1684411444634}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci8vIEBpbXBvcnQgIi4uLy4uL2Fzc2V0cy9jc3MvZGlhbG9nLnNjc3MiCg=="},{"version":3,"sources":["tasklog.vue"],"names":[],"mappings":";AAkQA","file":"tasklog.vue","sourceRoot":"src/views/common","sourcesContent":["<template>\r\n\t<div>\r\n\t\t<div class=\"log-btns\">\r\n\t\t\t<van-button type=\"primary\" size=\"small\" @click=\"createFlow\">流程图</van-button>\r\n\t\t\t<!-- <van-button type=\"primary\" size=\"small\">打印预览</van-button> -->\r\n\t\t</div>\r\n\t\t<div class=\"log-content\">\r\n\t\t\t<!-- <van-steps direction=\"vertical\" :active=\"logData.length-1\" style=\"background:rgba(0,0,0,0)\">\r\n\t\t\t\t<van-step v-for=\"item in logData\">\r\n\t\t\t\t\t<h5>流程环节: {{item.taskName}}</h5>\r\n\t\t\t\t\t<h5>执行人: {{item.createName}}</h5>\r\n\t\t\t\t\t<h5>操作: {{item.approvalType}}</h5>\r\n\t\t\t\t\t<h5>审批意见: {{item.comment}}</h5>\r\n\t\t\t\t\t<h5>处理时间1: {{item.createTime}}</h5>\r\n\t\t\t\t</van-step>\r\n\t\t\t</van-steps> -->\r\n\t\t\t<el-tabs v-model=\"activeName\" type=\"card\">\r\n\t\t\t\t<el-tab-pane label=\"审批记录\" name=\"first\">\r\n\t\t\t\t\t<el-table :data=\"logData\" style=\"width: 100%\" border class=\"have_scrolling\">\r\n\t\t\t\t\t\t<el-table-column type=\"index\" width=\"50\" align=\"center\" label=\"序号\">\r\n\t\t\t\t\t\t</el-table-column>\r\n\t\t\t\t\t\t<el-table-column prop=\"taskName\" align=\"center\" label=\"流程环节\">\r\n\t\t\t\t\t\t</el-table-column>\r\n\t\t\t\t\t\t<el-table-column prop=\"createName\" align=\"center\" label=\"执行人\">\r\n\t\t\t\t\t\t</el-table-column>\r\n\t\t\t\t\t\t<el-table-column prop=\"approvalType\" align=\"center\" label=\"操作\">\r\n\t\t\t\t\t\t</el-table-column>\r\n\t\t\t\t\t\t<el-table-column prop=\"comment\" align=\"center\" label=\"审批意见\"  show-overflow-tooltip>\r\n\t\t\t\t\t\t</el-table-column>\r\n\t\t\t\t\t\t<el-table-column prop=\"createTime\" align=\"center\" label=\"处理时间\" show-overflow-tooltip>\r\n\t\t\t\t\t\t</el-table-column>\r\n\t\t\t\t\t</el-table>\r\n\t\t\t\t</el-tab-pane>\r\n\t\t\t\t<el-tab-pane v-if=\"hasTaskUser\" label=\"审批人\" name=\"second\">\r\n\t\t\t\t\t<el-table :data=\"userData\" style=\"width: 100%\" border class=\"have_scrolling\">\r\n\t\t\t\t\t\t<el-table-column type=\"index\" width=\"50\" align=\"center\" label=\"序号\">\r\n\t\t\t\t\t\t</el-table-column>\r\n\t\t\t\t\t\t<el-table-column prop=\"loginName\" align=\"center\" label=\"审批人\">\r\n\t\t\t\t\t\t</el-table-column>\r\n\t\t\t\t\t\t<el-table-column prop=\"showName\" align=\"center\" label=\"昵称\">\r\n\t\t\t\t\t\t</el-table-column>\r\n\t\t\t\t\t\t<el-table-column prop=\"lastApprovalTime\" align=\"center\" label=\"处理时间\">\r\n\t\t\t\t\t\t</el-table-column>\r\n\t\t\t\t\t</el-table>\r\n\t\t\t\t</el-tab-pane>\r\n\t\t\t</el-tabs>\r\n\t\t</div>\r\n\t\t<el-drawer title=\"我是标题\" :visible.sync=\"dialogVisible\" :with-header=\"false\" size=\"90%\">\r\n\t\t\t<div id=\"container\" style=\"width:100%;height:100%\"></div>\r\n\t\t</el-drawer>\r\n\t</div>\r\n</template>\r\n\r\n\r\n<script>\r\n\timport BpmnModeler from 'bpmn-js/lib/Modeler';\r\n\timport * as api from \"@/api/quality\";\r\n\t\r\n\texport default {\r\n\t\tprops:['taskInfo'],\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tdialogVisible: false,\r\n\t\t\t\tlogData: [],\r\n\t\t\t\tactiveName: 'first',\r\n\t\t\t\tuserData: [],\r\n\t\t\t\tbpmnModeler: null,\r\n\t\t\t\txmlStr:'',\r\n\t\t\t\trunVariables: {},\r\n\t\t\t\thasTaskUser:false,\r\n\t\t\t\tprocessNodeInfo: {}\r\n\t\t\t};\r\n\t\t},\r\n\t\tcreated() {},\r\n\t\tcomponents: {},\r\n\t\tcomputed: {},\r\n\t\tmounted() {\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tinitData(){\r\n\t\t\t\tapi.viewProcessBpmn({\r\n\t\t\t\t\tprocessDefinitionId:this.taskInfo['processDefinitionId']\r\n\t\t\t\t}).then((res) => {\r\n\t\t\t\t\tthis.xmlStr=res['data'];\r\n\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t\t// processInstanceId=eeeed0da-fcf8-11ec-864e-005056c00001&flowKey=fenxiangkaigongshenqing&projectId=2&buildSection=3\r\n\t\t\t\tapi.getRunVariables({\r\n\t\t\t\t\tprocessInstanceId:this.taskInfo['processInstanceId'],\r\n\t\t\t\t\tflowKey: this.taskInfo['flowKey'],\r\n\t\t\t\t\tbuildSection: this.$store.getters.currentBiaoDuan.id || 3,\r\n\t\t\t\t\tprojectId: this.$store.getters.curProject.id || 2,\r\n\t\t\t\t}).then((res) => {\r\n\t\t\t\t\tthis.runVariables=res['data'];\r\n\t\t\t\t\t\r\n\t\t\t\t})\r\n\t\t\t\tapi.viewHighlightFlowData({\r\n\t\t\t\t\tprocessInstanceId:this.taskInfo['processInstanceId']\r\n\t\t\t\t}).then((res) => {\r\n\t\t\t\t\tthis.processNodeInfo = res.data;\r\n\t\t\t\t});\r\n\t\t\t\tapi.listFlowTaskComment({\r\n\t\t\t\t\tprocessInstanceId:this.taskInfo['processInstanceId']\r\n\t\t\t\t}).then((res) => {\r\n\t\t\t\t\tconst _data = [];\r\n\t\t\t\t\tfor (let i = 0; i < res.data.length; i++) {\r\n\t\t\t\t\t\tconst item = res.data[i];\r\n\t\t\t\t\t\titem.comment = item.comment === undefined ? \"发起\" : item.comment; // 默认显示为发起\r\n\t\t\t\t\t\t// getUserInfo(item.createUserId).then(res1 => {\r\n\t\t\t\t\t\t// \titem.createUsernameStr = res1.data.userInfo.NAME;\r\n\t\t\t\t\t\t// \t_data.push(JSON.parse(JSON.stringify(item)));\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t// \tthis.logData=_data||[]; // 强制刷新\r\n\t\t\t\t\t\t// })\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.logData=res['data']||[];\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t// if(this.taskInfo['taskId']){\r\n\t\t\t\t// \tapi.viewTaskUserInfo({\r\n\t\t\t\t// \t\tprocessDefinitionId: this.taskInfo['processDefinitionId'],\r\n\t\t\t\t// \t\tprocessInstanceId: this.taskInfo['processInstanceId'],\r\n\t\t\t\t// \t\ttaskId: this.taskInfo['taskId'],\r\n\t\t\t\t// \t\thistoric:true\r\n\t\t\t\t// \t}).then((res) => {\r\n\t\t\t\t// \t\tthis.userData=res['data']||[];\r\n\t\t\t\t// \t});\r\n\t\t\t\t// }else{\r\n\t\t\t\t// \tthis.hasTaskUser=false;\r\n\t\t\t\t// }\r\n\t\t\t},\r\n\t\t\tcreateFlow() {\r\n\t\t\t\tconst that = this;\r\n\t\t\t\tthat.dialogVisible = true;\r\n\t\t\t\t// if(this.bpmnModeler)return;\r\n\t\t\t\tsetTimeout(()=>{\r\n\t\t\t\t\tconst containerElement = document.getElementById('container');\r\n\t\t\t\t\tthat.bpmnModeler && that.bpmnModeler.destroy();\r\n\t\t\t\t\tthat.bpmnModeler = new BpmnModeler({\r\n\t\t\t\t\t\tcontainer: containerElement,\r\n\t\t\t\t\t\tadditionalModules: [{\r\n\t\t\t\t\t\t\tpaletteProvider: [\"value\", ''], // 禁用/清空左侧工具栏\r\n\t\t\t\t\t\t\tlabelEditingProvider: [\"value\", ''], // 禁用节点编辑\r\n\t\t\t\t\t\t\tcontextPadProvider: [\"value\", ''], // 禁用图形菜单\r\n\t\t\t\t\t\t}]\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthat.bpmnModeler.importXML(that.xmlStr, (err) => {\r\n\t\t\t\t\t\tif (!err) {\r\n\t\t\t\t\t\t\t// 让图能自适应屏幕\r\n\t\t\t\t\t\t\tconst canvas = that.bpmnModeler.get('canvas')\r\n\t\t\t\t\t\t\tcanvas.zoom('fit-viewport')\r\n\r\n\t\t\t\t\t\t\tlet { finishedTaskSet, unfinishedTaskSet } = that.processNodeInfo;\r\n\t\t\t\t\t\t\t// 目的：为第一个节点添加绿色，为第二个节点添加黄色\r\n\t\t\t\t\t\t\t// 实现步骤：1、找到页面里所有节点\r\n\t\t\t\t\t\t\tconst elementRegistry = that.bpmnModeler.get('elementRegistry');\r\n\t\t\t\t\t\t\tconst nodeList = elementRegistry.filter (\r\n\t\t\t\t\t\t\t(item) => finishedTaskSet.indexOf(item.id) > -1 && unfinishedTaskSet.indexOf(item.id) < 0\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tconst userTaskList = elementRegistry.filter(\r\n\t\t\t\t\t\t\t\t(item) => item.type === 'bpmn:UserTask'\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t// 此时得到的userTaskList 便是流程图中所有的节点的集合\r\n\t\t\t\t\t\t\tconsole.log(nodeList, elementRegistry, userTaskList);\r\n\t\t\t\t\t\t\t// 步骤2 ：为节点添加颜色\r\n\t\t\t\t\t\t\t// 方式1 ：modeling.setColor(参数1：节点，可以是单个元素实例，也可是多个节点组成的数组，参数2：class类);\r\n\t\t\t\t\t\t\tlet modeling = that.bpmnModeler.get('modeling');\r\n\t\t\t\t\t\t\tnodeList.forEach(item => {\r\n\t\t\t\t\t\t\t\tmodeling.setColor(item, {\r\n\t\t\t\t\t\t\t\t\tstroke: 'green',\r\n\t\t\t\t\t\t\t\t\tfill: 'rgb(197 255 197)'\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tuserTaskList.forEach(item => {\r\n\t\t\t\t\t\t\t\tlet nodename = item.businessObject.$attrs['flowable:assignee'].replace('${','').replace('}','')\r\n\t\t\t\t\t\t\t\tif (nodename == 'assignee') nodename += 'List';\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (nodename == 'startUserName' && !that.runVariables[nodename+'Str']) {\r\n\t\t\t\t\t\t\t\t\tnodename = 'initiator';\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// modeling.updateLabel(item, item.businessObject.name + '\\n' +this.runVariables[nodename+'Str']?this.runVariables[nodename+'Str']:'无');\r\n\t\t\t\t\t\t\t\tmodeling.updateLabel(item, item.businessObject.name + '\\n' + (that.runVariables[nodename+'Str']&&that.runVariables[nodename+'Str'].length>0?that.runVariables[nodename+'Str']:'无'));\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t// this.setProcessStatus(this.processNodeInfo) // 未起作用，可能是css问题\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// const eventBus = this.bpmnModeler.get('eventBus');\r\n\t\t\t\t\t\t\t// // 注册节点事件，eventTypes中可以写多个事件\r\n\t\t\t\t\t\t\t// const eventTypes = ['element.click', 'element.hover'];\r\n\t\t\t\t\t\t\t// eventTypes.forEach((eventType) => {\r\n\t\t\t\t\t\t\t// \teventBus.on(eventType, (e) => {\r\n\t\t\t\t\t\t\t// \t\tconst {element} = e;\r\n\t\t\t\t\t\t\t// \t\tif (!element.parent) return;\r\n\t\t\t\t\t\t\t// \t\tif (!e || element.type === 'bpmn:Process') {\r\n\t\t\t\t\t\t\t// \t\t\treturn false;\r\n\t\t\t\t\t\t\t// \t\t} else {\r\n\t\t\t\t\t\t\t// \t\t\tif (eventType === 'element.click') {\r\n\t\t\t\t\t\t\t// \t\t\t\t// 节点点击后想要做的处理\r\n\t\t\t\t\t\t\t// \t\t\t\t// 此时想要点击节点后，拿到节点实例，通过外部输入更新节点名称\r\n\t\t\t\t\t\t\t// \t\t\t\tthis.currentElement = element;\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// \t\t\t\tconsole.log(element.id);\r\n\t\t\t\t\t\t\t// \t\t\t\tconst modeling = this.bpmnModeler.get('modeling');\r\n\t\t\t\t\t\t\t// \t\t\t\tmodeling.updateLabel(element, \"1234\");\r\n\t\t\t\t\t\t\t// \t\t\t} else if (eventType === 'element.hover') {\r\n\t\t\t\t\t\t\t// \t\t\t\t// 鼠标滑过节点后想要做的处理\r\n\t\t\t\t\t\t\t// \t\t\t\tconsole.log('鼠标经过节点啦~');\r\n\t\t\t\t\t\t\t// \t\t\t}\r\n\t\t\t\t\t\t\t// \t\t}\r\n\t\t\t\t\t\t\t// \t});\r\n\t\t\t\t\t\t\t// });\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log('something went wrong:', err);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t},200)\r\n\t\t\t},\r\n\t\t\t// 设置流程图元素状态\r\n\t\t\tsetProcessStatus (processNodeInfo) {\r\n\t\t\t\tthis.processNodeInfo = processNodeInfo;\r\n\t\t\t\t// if (this.isLoading || this.processNodeInfo == null || this.bpmnModeler == null) return;\r\n\t\t\t\tlet { finishedSequenceFlowSet, finishedTaskSet, unfinishedTaskSet } = this.processNodeInfo;\r\n\t\t\t\tconst canvas = this.bpmnModeler.get('canvas');\r\n\t\t\t\tconst elementRegistry = this.bpmnModeler.get('elementRegistry');\r\n\t\t\t\tif (Array.isArray(finishedSequenceFlowSet)) {\r\n\t\t\t\t\tfinishedSequenceFlowSet.forEach(item => {\r\n\t\t\t\t\tif (item != null) {\r\n\t\t\t\t\t\tcanvas.addMarker(item, 'success');\r\n\t\t\t\t\t\tlet element = elementRegistry.get(item);\r\n\t\t\t\t\t\tconst conditionExpression = element.businessObject.conditionExpression;\r\n\t\t\t\t\t\tif (conditionExpression) {\r\n\t\t\t\t\t\t\tcanvas.addMarker(item, 'condition-expression');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (Array.isArray(finishedTaskSet)) {\r\n\t\t\t\t\tfinishedTaskSet.forEach(item => {\r\n\t\t\t\t\tcanvas.addMarker(item, 'success');\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (Array.isArray(unfinishedTaskSet)) {\r\n\t\t\t\t\tunfinishedTaskSet.forEach(item => {\r\n\t\t\t\t\tcanvas.addMarker(item, 'current');\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n\t// @import \"../../assets/css/dialog.scss\"\r\n</style>\r\n\r\n\r\n"]}]}
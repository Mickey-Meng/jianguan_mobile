{"remainingRequest":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\src\\views\\common\\weatherDetail.vue?vue&type=style&index=0&id=59ea6edb&lang=scss&scoped=true&","dependencies":[{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\src\\views\\common\\weatherDetail.vue","mtime":1684246187968},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\css-loader\\dist\\cjs.js","mtime":1684411443176},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1684411446724},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\postcss-loader\\src\\index.js","mtime":1684411443221},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1684411446938},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1684411445150},{"path":"E:\\Workspace\\JianGuan\\jianguan_mobile\\mobile\\node_modules\\vue-loader\\lib\\index.js","mtime":1684411444634}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoud2VhdGhlci1kZXRhaWwgew0KICAuZWNoYXJ0IHsNCiAgICBtYXJnaW46IDJweCAwOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiAyNjBweDsNCiAgfQ0KfQ0K"},{"version":3,"sources":["weatherDetail.vue"],"names":[],"mappings":";AAqNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"weatherDetail.vue","sourceRoot":"src/views/common","sourcesContent":["<template>\r\n  <div class=\"weather-detail\">\r\n    <common-chart v-if=\"show\" :options=\"options\" className=\"echart\"></common-chart>\r\n  </div>\r\n</template>\r\n<script>\r\nimport CommonChart from '@/components/echarts/CommonChart'\r\nimport { getWeather } from '@/api/weather.js'\r\nimport { getWeatherImg } from '@/utils/index'\r\nexport default {\r\n  components: {\r\n    CommonChart\r\n  },\r\n  data() {\r\n    return {\r\n      echartId: 'weather-detail',\r\n      xAxisData: [],\r\n      xAxisDataBottom: [],\r\n      tem: [],\r\n      temLow: [],\r\n      temWithSym: [],\r\n      yMin: 20,\r\n      yMax: 30,\r\n      options: null,\r\n      show: false\r\n    }\r\n  },\r\n  mounted() {\r\n    getWeather().then(data => {\r\n      if (data.status === 0) {\r\n        let forecasts = data.result.forecasts\r\n        forecasts.forEach((item, index) => {\r\n          this.xAxisData.push(item.text_day)\r\n          this.xAxisDataBottom.push(item.week)\r\n          this.tem.push(item.high)\r\n          this.temLow.push(item.low)\r\n          this.temWithSym.push({\r\n            value: item.high,\r\n            symbol: 'image://' + getWeatherImg(item.text_day)\r\n          })\r\n        })\r\n      }\r\n\r\n      this.yMax = this.tem.sort()[0] + 10\r\n      this.yMin = this.temLow.sort()[this.temLow.length - 1] - 10\r\n      this.updateChart()\r\n    })\r\n  },\r\n  methods: {\r\n    updateChart() {\r\n      this.options = this.getOptions();\r\n      this.show = true;\r\n    },\r\n    getOptions() {\r\n      return {\r\n        backgroundColor: '#fff',\r\n        tooltip: {\r\n          show: false\r\n        },\r\n        grid: {\r\n          top: '15%',\r\n          left: '8%',\r\n          right: '8%',\r\n          bottom: '10%'\r\n        },\r\n        xAxis: [\r\n          {\r\n            data: this.xAxisData,\r\n            axisLine: {\r\n              lineStyle: {\r\n                color: '#3b5872',\r\n                width: '2'\r\n              }\r\n            },\r\n            axisTick: {\r\n              alignWithLabel: true\r\n            },\r\n            splitLine: {\r\n              show: true,\r\n              lineStyle: {\r\n                color: '#00000080'\r\n              }\r\n            },\r\n            axisLabel: {\r\n              textStyle: {\r\n                fontSize: 16,\r\n                fontWeight: '600'\r\n              }\r\n            }\r\n          },\r\n          {\r\n            data: this.xAxisDataBottom,\r\n            axisTick: {\r\n              alignWithLabel: true\r\n            }\r\n          }\r\n        ],\r\n        yAxis: {\r\n          min: this.yMin,\r\n          max: this.yMax,\r\n          axisLabel: {\r\n            show: true,\r\n            textStyle: {\r\n              color: '#5e5e5e'\r\n            }\r\n          }\r\n        },\r\n        series: [\r\n          {\r\n            type: 'bar',\r\n            z: 1,\r\n            itemStyle: {\r\n              color: {\r\n                type: 'linear',\r\n                x: 0,\r\n                y: 0,\r\n                x2: 0,\r\n                y2: 1,\r\n                colorStops: [\r\n                  {\r\n                    offset: 0,\r\n                    color: 'rgba(219, 219, 219,1)'\r\n                  },\r\n                  {\r\n                    offset: 0.3,\r\n                    color: 'rgba(219, 219, 219,.3)'\r\n                  },\r\n                  {\r\n                    offset: 1,\r\n                    color: 'rgba(219, 219, 219,.1)'\r\n                  }\r\n                ],\r\n                global: false\r\n              }\r\n            },\r\n            barWidth: '40',\r\n            data: this.tem\r\n          },\r\n          {\r\n            name: '',\r\n            type: 'effectScatter',\r\n            rippleEffect: {\r\n              period: 1,\r\n              scale: 2,\r\n              brushType: 'fill'\r\n            },\r\n            z: 2,\r\n            symbolPosition: 'end',\r\n            symbolSize: 5,\r\n            itemStyle: {\r\n              normal: {\r\n                label: {\r\n                  show: true,\r\n                  fontSize: 16,\r\n                  position: 'bottom',\r\n                  distance: -20,\r\n                  formatter: function (params) {\r\n                    return `${params.value}°`\r\n                  },\r\n                  fontWeight: '600'\r\n                }\r\n              }\r\n            },\r\n            data: this.temLow\r\n          },\r\n          {\r\n            name: '',\r\n            type: 'effectScatter',\r\n            rippleEffect: {\r\n              period: 1,\r\n              scale: 2,\r\n              brushType: 'fill'\r\n            },\r\n            z: 2,\r\n            symbolPosition: 'end',\r\n            symbolSize: [56, 32],\r\n            symbolOffset: ['0', '0'],\r\n            itemStyle: {\r\n              normal: {\r\n                label: {\r\n                  show: true,\r\n                  fontSize: 16,\r\n                  position: 'bottom',\r\n                  distance: -54,\r\n                  formatter: function (params) {\r\n                    return `${params.value}°`\r\n                  },\r\n                  fontWeight: '600'\r\n                }\r\n              }\r\n            },\r\n            data: this.temWithSym\r\n          },\r\n          {\r\n            name: 'A',\r\n            type: 'line',\r\n            z: 1,\r\n            lineStyle: {\r\n              normal: {\r\n                width: 2,\r\n                color: '#000'\r\n              }\r\n            },\r\n            symbolSize: [0, 0],\r\n            data: this.tem\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.weather-detail {\r\n  .echart {\r\n    margin: 2px 0;\r\n    background-color: #ffffff;\r\n    width: 100%;\r\n    height: 260px;\r\n  }\r\n}\r\n</style>\r\n"]}]}